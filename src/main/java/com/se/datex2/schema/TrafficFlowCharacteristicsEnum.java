//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.30 at 10:48:06 AM GMT 
//


package com.se.datex2.schema;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TrafficFlowCharacteristicsEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TrafficFlowCharacteristicsEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="erraticFlow"/>
 *     &lt;enumeration value="smoothFlow"/>
 *     &lt;enumeration value="stopAndGo"/>
 *     &lt;enumeration value="trafficBlocked"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TrafficFlowCharacteristicsEnum")
@XmlEnum
public enum TrafficFlowCharacteristicsEnum {


    /**
     * Traffic flow is of an irregular nature, subject to sudden changes in rates.
     * 
     */
    @XmlEnumValue("erraticFlow")
    ERRATIC_FLOW("erraticFlow"),

    /**
     * Traffic flow is smooth.
     * 
     */
    @XmlEnumValue("smoothFlow")
    SMOOTH_FLOW("smoothFlow"),

    /**
     * Traffic flow is of a stop and go nature with queues forming and ending continuously on the specified section of road.
     * 
     */
    @XmlEnumValue("stopAndGo")
    STOP_AND_GO("stopAndGo"),

    /**
     * Traffic is blocked at the specified location and in the specified direction due to an unplanned event.
     * 
     */
    @XmlEnumValue("trafficBlocked")
    TRAFFIC_BLOCKED("trafficBlocked");
    private final String value;

    TrafficFlowCharacteristicsEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TrafficFlowCharacteristicsEnum fromValue(String v) {
        for (TrafficFlowCharacteristicsEnum c: TrafficFlowCharacteristicsEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
