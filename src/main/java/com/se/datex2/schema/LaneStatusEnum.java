//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.30 at 10:48:06 AM GMT 
//


package com.se.datex2.schema;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LaneStatusEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LaneStatusEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="normal"/>
 *     &lt;enumeration value="affected"/>
 *     &lt;enumeration value="closed"/>
 *     &lt;enumeration value="hardShoulderRunning"/>
 *     &lt;enumeration value="unknown"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "LaneStatusEnum")
@XmlEnum
public enum LaneStatusEnum {


    /**
     * The lane is operating normally.
     * 
     */
    @XmlEnumValue("normal")
    NORMAL("normal"),

    /**
     * The lane operation is partially affected.
     * 
     */
    @XmlEnumValue("affected")
    AFFECTED("affected"),

    /**
     * The lane is fully closed.
     * 
     */
    @XmlEnumValue("closed")
    CLOSED("closed"),

    /**
     * The hard shoulder lane is open for traffic (applies to hard shoulder lanes only).
     * 
     */
    @XmlEnumValue("hardShoulderRunning")
    HARD_SHOULDER_RUNNING("hardShoulderRunning"),

    /**
     * The lane status is unknown.
     * 
     */
    @XmlEnumValue("unknown")
    UNKNOWN("unknown");
    private final String value;

    LaneStatusEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static LaneStatusEnum fromValue(String v) {
        for (LaneStatusEnum c: LaneStatusEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
