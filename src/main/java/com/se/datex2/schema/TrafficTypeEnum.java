//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.30 at 10:48:06 AM GMT 
//


package com.se.datex2.schema;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TrafficTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TrafficTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="accessOnlyTraffic"/>
 *     &lt;enumeration value="destinedForAirport"/>
 *     &lt;enumeration value="destinedForAirportArrivals"/>
 *     &lt;enumeration value="destinedForAirportDepartures"/>
 *     &lt;enumeration value="destinedForFerryService"/>
 *     &lt;enumeration value="destinedForRailService"/>
 *     &lt;enumeration value="holidayTraffic"/>
 *     &lt;enumeration value="localTraffic"/>
 *     &lt;enumeration value="longDistanceTraffic"/>
 *     &lt;enumeration value="regionalTraffic"/>
 *     &lt;enumeration value="residentsOnlyTraffic"/>
 *     &lt;enumeration value="throughTraffic"/>
 *     &lt;enumeration value="visitorTraffic"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TrafficTypeEnum")
@XmlEnum
public enum TrafficTypeEnum {


    /**
     * Traffic destined for local access only.
     * 
     */
    @XmlEnumValue("accessOnlyTraffic")
    ACCESS_ONLY_TRAFFIC("accessOnlyTraffic"),

    /**
     * Traffic destined for the airport.
     * 
     */
    @XmlEnumValue("destinedForAirport")
    DESTINED_FOR_AIRPORT("destinedForAirport"),

    /**
     * Traffic destined for airport arrivals.
     * 
     */
    @XmlEnumValue("destinedForAirportArrivals")
    DESTINED_FOR_AIRPORT_ARRIVALS("destinedForAirportArrivals"),

    /**
     * Traffic destined for airport departures.
     * 
     */
    @XmlEnumValue("destinedForAirportDepartures")
    DESTINED_FOR_AIRPORT_DEPARTURES("destinedForAirportDepartures"),

    /**
     * Traffic destined for the ferry service.
     * 
     */
    @XmlEnumValue("destinedForFerryService")
    DESTINED_FOR_FERRY_SERVICE("destinedForFerryService"),

    /**
     * Traffic destined for the rail service.
     * 
     */
    @XmlEnumValue("destinedForRailService")
    DESTINED_FOR_RAIL_SERVICE("destinedForRailService"),

    /**
     * Traffic heading towards holiday destinations.
     * 
     */
    @XmlEnumValue("holidayTraffic")
    HOLIDAY_TRAFFIC("holidayTraffic"),

    /**
     * Traffic heading towards local destinations.
     * 
     */
    @XmlEnumValue("localTraffic")
    LOCAL_TRAFFIC("localTraffic"),

    /**
     * Traffic heading towards destinations which are a long distance away.
     * 
     */
    @XmlEnumValue("longDistanceTraffic")
    LONG_DISTANCE_TRAFFIC("longDistanceTraffic"),

    /**
     * Traffic heading towards local regional destinations.
     * 
     */
    @XmlEnumValue("regionalTraffic")
    REGIONAL_TRAFFIC("regionalTraffic"),

    /**
     * Local residents only traffic.
     * 
     */
    @XmlEnumValue("residentsOnlyTraffic")
    RESIDENTS_ONLY_TRAFFIC("residentsOnlyTraffic"),

    /**
     * Traffic which is not for local access, i.e. traffic not destined for local town, city or built up area but for transit though the area.
     * 
     */
    @XmlEnumValue("throughTraffic")
    THROUGH_TRAFFIC("throughTraffic"),

    /**
     * Traffic heading towards local visitor attraction.
     * 
     */
    @XmlEnumValue("visitorTraffic")
    VISITOR_TRAFFIC("visitorTraffic");
    private final String value;

    TrafficTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TrafficTypeEnum fromValue(String v) {
        for (TrafficTypeEnum c: TrafficTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
